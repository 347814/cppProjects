
#include <iostream>
#include <fstream>
using namespace std;

struct node{
  int value;
  node* right;
  node* left;
  node* parent;
  char color;

};
void rotateRight(node* k);
void read(node* &root);
void fix(node* root, node* k);
void step2(node* k);
node* getSibiling(node* root, node* k);
node* getUncle(node* root, node* k);
node* getGrandparent(node* k);
void rotateRight(node* k);
void insert(int a , node* current, node* &root);
 int main(){
  node* root = NULL;
  root->color = 'b';





}
void read(node* &root){ //reads input and calls insert method
  cout<<"Enter 1 for console entry or 2 for file input"<<endl;
  int entry = 0;
  //cin.ignore();
  cin>>entry;
  if(entry == 1){
    char* input = new char[100];
    cout<<"Enter up to 100 numbers seperated by spaces"<<endl;
    cin.ignore();
    cin.get(input, 100);
    ofstream file;
    file.open("treefile");
    file<<input;
    file.close();
    ifstream infile;
    infile.open("treefile");
    int a;
    while(infile >> a){
      //cout<<a<<endl;
      insert(a, root, root);   
    }

  }

  if(entry == 2){
    cout<<"Enter file name"<<endl;
    char* filename = new char[100];
    cin.ignore();
    cin.get(filename, 100);
    ifstream infile;
    infile.open(filename);
    if(infile.fail()){
      cout<<"no such file exists"<<endl;
    }
    
    else{
      int a;
      while(infile >> a){
      insert(a, root, root);
      }
    }
  }
}//end read method
void insert(int a , node* current, node* &root){ //inserts elements appropriately into tree
  //cout<<a<<endl;
  if(root == NULL){ //if first node in tree
    cout<<"new root: "<<a<<endl;
    node* temp = new node;
    temp->value = a;
    root = temp;
    root->parent = NULL;
    
  }
  else{
    if(a < current->value){
      if(current->left == NULL){
      node* temp = new node;
      temp->value = a;
      current->left = temp;
      temp->parent = current;
    
      }
      else{
	insert(a, current->left, root);
      }

    }
    else if(a > current->value){ //a is more than or equal to
      if(current->right == NULL){
      node* temp = new node;
      temp->value = a;
      current->right = temp;
      temp->parent = current;
    
      }
      else{
	insert(a, current->right, root);
      }

    }

  }
  
}
void fix(node* root, node* k){
  if(k == root){
    k->color = 'b';
    return;
  }
  else if(k->parent->color == 'b'){
    return;
    
  }
  else if(getUncle(root, k)!= NULL && getUncle(root, k)->root->color == 'r'){
    //case 3 wikipedia
    k->parent->color = black;
    getUncle(root, k)->color = 'b';
    getGrandparent(k)->color = 'r';
    fix(root, getGrandparent(k));
    
  }
  else{
      
    node* p = k->parent;
    node* g = getGrandparent(k);
    if(k == p->right && p == g->left){
      //rotate left(k)
      k = k->left;

    }
    if(k == p->left && p == g->right){
      //rotate right(k)
      k = k->right;

    }


    //step 2

    
  }
  
  




}

void step2(node* k){
   node* p = k->parent;
   node* g = getGrandparent(k);

   if(k == p->left){
     //rotate right(g);

   }
   else{
     //rotate left(g);

   }
   p->color = 'b';
   g->color = 'r';

  

}


node* getUncle(node* root, node* k){

  node* p = k->parent;
  return p->getSibiling();



}
node* getSibiling(node* root, node* k){
  node* p = k->parent;
  if(p==NULL){
    return;
  }
  if(k==p->left){
    return p->right; 
  }
  else{
    return p->left;
  }

}
node* getGrandparent(node* k){
  if(k == NULL){
    return;

  }
  node* p = k->parent;
  if(p == NULL){
    return;
  }
  node* t = p->parent;
  if(t == NULL){
    return;
  }
  else{
    return t;
  }

}
void rotateLeft(node* k){
  node* temp = k->right;
  node* p = k->parent;

  k->right = temp->left
  temp->left = k;
  k->parent = temp;
  if(k->right !=NULL){
    k->right->parent = k;
 

  }
  //if k was root
  if(p != NULL){
    if(k==p->left){
      p->left = temp;

    }
    else if(k==p->right){
      p->right = temp;

    }



  }
  temp->parent = p;

}
void rotateRight(node* k){
  node* temp = k->left;
  node* p = k->parent;

  k->left = temp->right;
  temp->right = k;
  k->parent = temp;
  if(k->left !=NULL){
    k->left->parent = k;
 

  }
  //if k was root
  if(p != NULL){
    if(k==p->left){
      p->left = temp;

    }
    else if(k==p->right){
      p->right = temp;

    }



  }
  temp->parent = p;

}
